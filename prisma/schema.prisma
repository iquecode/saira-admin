generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String        @id @default(uuid())
  email                  String        @unique
  password               String
  name                   String?
  socialName             String?       @map("social_name")
  nickname               String?
  note                   String?
  occupation             String?
  cep                    String?
  addressLine1           String?       @map("address_line1")
  addressLine2           String?       @map("address_line2")
  avatarURL              String?       @map("avatar_url")
  cityId                 Int?          @map("city_id")
  countryId              Int?          @map("country_id")
  createdAt              DateTime      @default(now()) @map("created_at")
  documentNumber         String?       @map("document_number")
  documentPhotoURL1      String?       @map("document_photo_url1")
  documentPhotoURL2      String?       @map("document_photo_url2")
  documentTypeId         Int?          @map("document_type_id")
  fatherName             String?       @map("father_name")
  motherName             String?       @map("mother_name")
  updatedAt              DateTime?     @updatedAt @map("updated_at")
  active                 Boolean       @default(true)
  deletable              Boolean       @default(true)
  deleted                Boolean       @default(false)
  emailVerified          Boolean       @default(false) @map("email_verified")
  loginAttempts          Int           @default(0) @map("login_attempts")
  loginBlocked           Boolean       @default(false) @map("login_blocked")
  loginBlockedReason     String?       @map("login_blocked_reason")
  type                   String?       @default("user")
  associated             Boolean       @default(false) 
  birthDate              Int?          @map("birth_date")
  loginBlockedExpiration Int?          @map("login_blocked_expiration")
  tokenEmailVerify       String?       @unique @map("token_email_verify")
  tokenResetPassword     String?       @unique @map("token_reset_password")
  tokenSignUpFlow        String?       @unique @map("token_signup_flow")
  city                   City?         @relation(fields: [cityId], references: [id])
  country                Country?      @relation(fields: [countryId], references: [id])
  documentType           DocumentType? @relation(fields: [documentTypeId], references: [id])
  contacts               Contact[]
  roles                  Role[]
  tokensHash             TokenHash[]
  Applications           UserApplication[]
  circles                Circle[]

  @@map("users")
}

model Circle {
  id        String    @id @default(uuid())
  name      String    @unique
  parentId  String?   @map("parent_id")
  note      String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletable Boolean   @default(true)
  deleted   Boolean   @default(false)
  parent    Circle?   @relation("CircleToCircle", fields: [parentId], references: [id])
  childrens Circle[]  @relation("CircleToCircle")
  roles     Role[]
  members   User[]

  @@map("circles")
}

model RoleType {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  note        String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletable   Boolean   @default(true)
  deleted     Boolean   @default(false)
  roles       Role[]

  @@map("role_types")
}

model Role {
  id          String    @id @default(uuid())
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletable   Boolean   @default(true)
  deleted     Boolean   @default(false)
  circleId    String?   @map("circle_id")
  memberId    String    @map("member_id")
  note        String?
  roleTypeId  Int       @map("role_type_id")
  validate    Int?
  circle      Circle?   @relation(fields: [circleId], references: [id])
  member      User      @relation(fields: [memberId], references: [id])
  roleType    RoleType  @relation(fields: [roleTypeId], references: [id])

  @@map("roles")
}

model Contact {
  id        String    @id @default(uuid())
  name      String
  value     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  userId    String    @map("user_id")
  deletable Boolean   @default(true)
  deleted   Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])

  @@map("contacts")
}

model DocumentType {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletable Boolean   @default(true)
  deleted   Boolean   @default(false)
  users     User[]

  @@map("document_types")
}

model Country {
  id        Int       @id @default(autoincrement())
  iso       String?
  iso3      String?
  nameEn    String    @map("name_en")
  nameEs    String    @map("name_es")
  namePt    String    @map("name_pt")
  numCode   Int?      @map("num_code")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  users     User[]

  @@map("countries")
}

model State {
  id        Int       @id
  name      String
  uf        String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  cities    City[]

  @@map("states")
}

model City {
  id        Int       @id
  name      String
  codIbge   Int       @map("cod_ibge")
  stateId   Int       @map("state_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  state     State     @relation(fields: [stateId], references: [id])
  users     User[]

  @@map("cities")
}

model TokenHash {
  id          String    @id @default(uuid())
  hash        String
  userId      String    @map("user_id")
  dispositive String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  expiration  Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens_hash")
}



//Ex. Pedido de associação ao instituto 
//
model TypeUserApplication {
  id          String    @id @default(uuid())
  name        String    
  note        String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletable   Boolean   @default(true)
  deleted     Boolean   @default(false)
  userApplications UserApplication[]
}

//Ex. compromisso com os princípios fundamentais em
// dispositivo compromisso com os princípios fundamentais
//ip compromisso com os princípios fundamentais
model DataUserApplication {
  id      String    @id @default(uuid())
  name    String
  value   String
  userApplicationId String @map("user_application_id")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime? @updatedAt @map("updated_at")
  deletable             Boolean   @default(true)
  deleted               Boolean   @default(false)
  userApplication UserApplication @relation(fields: [userApplicationId], references: [id], onDelete: Cascade)
}

model UserApplication {
  id                    String    @id @default(uuid())
  userId                String    @map("user_id") @unique
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  typeUserApplicationId String    @map("type_user_application_id")
  type                  TypeUserApplication @relation(fields: [typeUserApplicationId], references: [id])
  status                String    @map("status")
  DataUserApplication   DataUserApplication[]
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime? @updatedAt @map("updated_at")
  deletable             Boolean   @default(true)
  deleted               Boolean   @default(false)
}